load('ext://namespace', 'namespace_create')

allow_k8s_contexts('k3d-testapp')
default_registry('k3d-testapp-registry.local.lncd.pl:21345')

# All services needed for tests

test_services = [
  ['testapp_funnel', 'TestAppFunnel'],
  ['testapp1', 'TestApp1'],
  ['testapp2', 'TestApp2'],
]

for test_service_lower, test_service_pascal in test_services:
  local_resource(
    'build-%s' % test_service_lower,
    'dotnet publish -o out/%s ../test/LeanCode.Pipe.Funnel.%s' % (test_service_lower, test_service_pascal),
    deps=['../src', '../test/LeanCode.Pipe.Funnel.%s' % test_service_pascal],
    ignore=['../**/obj', '../**/bin'],
    labels=['test-services'],
  )

  docker_build(
    test_service_lower,
    '.',
    dockerfile='%s.dockerfile' % test_service_lower,
    only = ['out/%s' % test_service_lower],
  )

k8s_yaml('rabbitmq.yaml')
k8s_resource('rabbitmq', labels=['test-services'])

def test_setup_and_run(kebab_name, snake_name, pascal_name, with_testapp2=False):
  test_build_deps = [
    '../src',
    '../test/LeanCode.Pipe.Funnel.TestAppFunnel',
    '../test/LeanCode.Pipe.Funnel.TestApp1',
    '../test/LeanCode.Pipe.Funnel.%s' % pascal_name
  ]

  if (with_testapp2):
    test_build_deps.append('../test/LeanCode.Pipe.Funnel.TestApp2')

  local_resource(
    'build-%s-tests' % kebab_name,
    'dotnet publish -o out/%s_tests ../test/LeanCode.Pipe.Funnel.%sTests' % (snake_name, pascal_name),
    deps=test_build_deps,
    ignore=['../**/obj', '../**/bin'],
    labels=['%s-tests' % kebab_name]
  )

  namespace_create(kebab_name)

  k8s_yaml(local('./subst_tpl_envs.sh %s funnel.yaml' % snake_name))
  k8s_resource(
    '%s-funnel' % kebab_name,
    resource_deps=['rabbitmq'],
    labels=['%s-tests' % kebab_name],
  )

  k8s_yaml(local('./subst_tpl_envs.sh %s testapp1.yaml' % snake_name))
  k8s_resource(
    '%s-testapp1' % kebab_name,
    resource_deps=['rabbitmq'],
    labels=['%s-tests' % kebab_name],
  )

  test_deps = ['%s-funnel' % kebab_name, '%s-testapp1' % kebab_name]

  if (with_testapp2):
    test_deps.append('%s-testapp2' % kebab_name)

    k8s_yaml(local('./subst_tpl_envs.sh %s testapp2.yaml' % snake_name))
    k8s_resource(
      '%s-testapp2' % kebab_name,
      resource_deps=['rabbitmq'],
      labels=['%s-tests' % kebab_name],
    )

  docker_build(
    '%s_tests' % snake_name,
    '.',
    dockerfile='%s/tests.dockerfile' % snake_name,
    only = ['out/%s_tests' % snake_name],
  )
  k8s_yaml(local('./subst_tpl_envs.sh %s tests.yaml' % snake_name))
  k8s_resource(
    '%s-tests' % kebab_name,
    resource_deps=test_deps,
    labels=['%s-tests' % kebab_name],
  )

test_setup_and_run('no-scaling', 'no_scaling', 'NoScaling')
test_setup_and_run('scaled-target-service', 'scaled_target_service', 'ScaledTargetService')
test_setup_and_run('scaled-funnel', 'scaled_funnel', 'ScaledFunnel')
test_setup_and_run('multiple-services', 'multiple_services', 'MultipleServices', True)
